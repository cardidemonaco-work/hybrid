###############################################################################
# Define the start-up parameters as required by DynatraceUEM.startup(...). If
# the application ID is not defined here, a reasonable default, typically the
# application name (as defined in AndroidManifest.xml) will be used.

#cpwrUEM_startup.sApplId=InstrumentedApp

#6.1 Dynatrace Web Server Agent connected to 6.1 Dynatrace Collector and Server (Intranet-facing)
#cpwrUEM_startup.agentPath=http://spacetravel.clients.nasa.cpwr.corp 

#6.2 Dynatrace Web Server Agent connected to 6.2 Dynatrace Collector and Server (Intranet-facing)
cpwrUEM_startup.agentPath=http://cd-dt-0602-win.clients.nasa.cpwr.corp

#6.2 Dynatrace Web Server Agent connected to 6.2 Dynatrace Collector and Server (Internet-facing)
#cpwrUEM_startup.agentPath=https://int-us-support.compuwareapmaas.com 

###############################################################################
# Define your SSL settings if applicable. You may use any certificate or define
# your keystore and password. If SSL is used, be sure to specify https in the
# agentPath property above.
# bksFileName: the file name only - no extension. For example, "mykeystore" in
# res/raw/mykeystore.bks

#cpwrUEM_startup.useAnyCert=true
#cpwrUEM_startup.bksFileName=myKeyStore
#cpwrUEM_startup.bksPassword=myPassword


###############################################################################
# Crash reporting settings. By default crash data reporting is enabled. See
# DynatraceUEM.enableCrashReporting(boolean sendCrashData)

#cpwrUEM_crash.reporting=false
#cpwrUEM_crash.sendCrashReport=false
#cpwrUEM_instr.lifecycleMonitoring=false

# If the application already has the GET_TASKS permission or choose to use this
# permission, the foreground/background transition will be better determined. This
# permission is NOT added by default.

#cpwrUEM_instr.useGetTasksPermission=true

# By default all packages are instrumented for web request tagging and timing to provide
# visibility into 3rd party web requests. This property and cpwrUEM_instr.includePackages
# and cpwrUEM_instr.excludePackages can be combined to fine tune the package instrumentation.
#
# For example, cpwrUEM_instr.includeAllPackages=true & cpwrUEM_instr.excludePackages=a.b
# would include all packages but "a.b".
#
# cpwrUEM_instr.includeAllPackages=false & cpwrUEM_instr.includePackages=a.b would only
# include "a.b".

#cpwrUEM_instr.includeAllPackages=false

# Add other packages if desired - use a comma as the separator.

#cpwrUEM_instr.includePackages=com.this.pkg,com.that.pkg

# Add packages, classes or methods to be excluded from instrumentation - use a comma as
# the separator.

#cpwrUEM_instr.excludePackages=com.xyz.IncludedClass.excludeThisMethod,com.xyz.ExcludedClass


###############################################################################
# Control whether to instrument for automatic user actions and how long before
# those actions stop accepting child events (web requests and user actions).
# By default, the instrumentation is on and the action time out is 500ms. The
# allowable values are between 100 - 5000ms.

#cpwrUEM_instr.autoUserAction=false
#cpwrUEM_action.autoActionTimeoutMs=1000

# Set the maximum duration of an automatically created user action. After
# autoActionTimeoutMs expires, the action waits for any outstanding web requests
# or child actions up to this amount of time since the action is created. After
# this time, actions will be automatically closed. Valid range is 100ms-540000ms.
# The default is 60000ms.

#cpwrUEM_action.autoActionMaxDurationMs=30000

# By default, empty actions with no child (web requests or actions) events are
# not transmitted.

#cpwrUEM_action.sendEmptyAutoAction=true


###############################################################################
# Define other runtime options
# Logging level: "info" (default) or "debug". Note that the logging level is
# applied to both Auto Instrumentation as well as the instrumented application. 

#cpwrUEM_logging.level=debug


###############################################################################
# Define the new version code and name for AndroidManifest.xml. The new version is
# required if Google Play is to be refreshed with the newly instrumented application.
# By default, Auto Instrumentation does change the version code and name. What's
# the difference between the version code and name? Read more here:
# http://developer.android.com/guide/topics/manifest/manifest-element.html#vcode

#cpwrUEM_appl.versionCode=1
#cpwrUEM_appl.versionName=1.0


###############################################################################
# For KonyOne based applications, use the following property so that at runtime
# the key "serviceID" can be used to fetch its value, the operation name, which
# in turn is used as the wrapping action name.

#cpwrUEM_action.nameUseValueOf=serviceID

###############################################################################
# Control whether to catch location updates from implementations of LocationListener
# When the onLocationChanged callback is triggered, the GPS location will be stored 
# with a course precision (xx.yyy)
# Note: your application is responsible for requesting location permissions and
# implementing the listener.
# 
#cpwrUEM_instr.gps_location=true

###############################################################################
# When capturing web requests, you can control how the wrapping actions are named.
# If captureFullUrl is set to false, the wrapping action will be named:
#  
#  WebRequest(www.domain.com)
# 
# If captureFullUrl is set to true, the wrapping action will contain the full URL
# plus parameters.
#
#  http://www.domain.com:8080?search=searchTerm&limit=10
#
#cpwrUEM_instr.showFullUrl=true

###############################################################################
# For hybrid applications using the Javascript agent or Javascript bridge,
# cookies need to be set for each instrumented domain or server the app communicates
# with.
# 
# Domain cookies are set with a preceeding dot, ie: .company.com is used to
# set a cookie for every server on that domain.
#
# Subdomains are set the same way: .subdomain.company.com would set cookies for
# servers in that subdomain.
#
# Specific hosts are addressed directly: host.company.com
#
# IP addresses are handled directly, the same way as hosts: 192.168.0.1

#cpwrUEM_setCookiesForDomain=.domain.com, .subdomain.company.com, host.company.com, 192.168.0.1
cpwrUEM_setCookiesForDomain=.clients.nasa.cpwr.corp